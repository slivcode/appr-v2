declare module 'ramda' {
	export let F;
	export let T;
	export let __;
	export let add;
	export let addIndex;
	export let adjust;
	export let all;
	export let allPass;
	export let always;
	export let and;
	export let any;
	export let anyPass;
	export let ap;
	export let aperture;
	export let append;
	export let apply;
	export let applySpec;
	export let ascend;
	export let assoc;
	export let assocPath;
	export let binary;
	export let bind;
	export let both;
	export let call;
	export let chain;
	export let clamp;
	export let clone;
	export let comparator;
	export let complement;
	export let compose;
	export let composeK;
	export let composeP;
	export let concat;
	export let cond;
	export let construct;
	export let constructN;
	export let contains;
	export let converge;
	export let countBy;
	export let curry;
	export let curryN;
	export let dec;
	export let defaultTo;
	export let descend;
	export let difference;
	export let differenceWith;
	export let dissoc;
	export let dissocPath;
	export let divide;
	export let drop;
	export let dropLast;
	export let dropLastWhile;
	export let dropRepeats;
	export let dropRepeatsWith;
	export let dropWhile;
	export let either;
	export let empty;
	export let eqBy;
	export let eqProps;
	export let equals;
	export let evolve;
	export let filter;
	export let find;
	export let findIndex;
	export let findLast;
	export let findLastIndex;
	export let flatten;
	export let flip;
	export let forEach;
	export let forEachObjIndexed;
	export let fromPairs;
	export let groupBy;
	export let groupWith;
	export let gt;
	export let gte;
	export let has;
	export let hasIn;
	export let head;
	export let identical;
	export let identity;
	export let ifElse;
	export let inc;
	export let indexBy;
	export let indexOf;
	export let init;
	export let insert;
	export let insertAll;
	export let intersection;
	export let intersectionWith;
	export let intersperse;
	export let into;
	export let invert;
	export let invertObj;
	export let invoker;
	export let is;
	export let isArrayLike;
	export let isEmpty;
	export let isNil;
	export let join;
	export let juxt;
	export let keys;
	export let keysIn;
	export let last;
	export let lastIndexOf;
	export let length;
	export let lens;
	export let lensIndex;
	export let lensPath;
	export let lensProp;
	export let lift;
	export let liftN;
	export let lt;
	export let lte;
	export let map;
	export let mapAccum;
	export let mapAccumRight;
	export let mapObjIndexed;
	export let match;
	export let mathMod;
	export let max;
	export let maxBy;
	export let mean;
	export let median;
	export let memoize;
	export let merge;
	export let mergeAll;
	export let mergeWith;
	export let mergeWithKey;
	export let min;
	export let minBy;
	export let modulo;
	export let multiply;
	export let nAry;
	export let negate;
	export let none;
	export let not;
	export let nth;
	export let nthArg;
	export let objOf;
	export let of;
	export let omit;
	export let once;
	export let or;
	export let over;
	export let pair;
	export let partial;
	export let partialRight;
	export let partition;
	export let path;
	export let pathEq;
	export let pathOr;
	export let pathSatisfies;
	export let pick;
	export let pickAll;
	export let pickBy;
	export let pipe;
	export let pipeK;
	export let pipeP;
	export let pluck;
	export let prepend;
	export let product;
	export let project;
	export let prop;
	export let propEq;
	export let propIs;
	export let propOr;
	export let propSatisfies;
	export let props;
	export let range;
	export let reduce;
	export let reduceBy;
	export let reduceRight;
	export let reduceWhile;
	export let reduced;
	export let reject;
	export let remove;
	export let repeat;
	export let replace;
	export let reverse;
	export let scan;
	export let sequence;
	export let set;
	export let slice;
	export let sort;
	export let sortBy;
	export let sortWith;
	export let split;
	export let splitAt;
	export let splitEvery;
	export let splitWhen;
	export let subtract;
	export let sum;
	export let symmetricDifference;
	export let symmetricDifferenceWith;
	export let tail;
	export let take;
	export let takeLast;
	export let takeLastWhile;
	export let takeWhile;
	export let tap;
	export let test;
	export let times;
	export let toLower;
	export let toPairs;
	export let toPairsIn;
	export let toString;
	export let toUpper;
	export let transduce;
	export let transpose;
	export let traverse;
	export let trim;
	export let tryCatch;
	export let type;
	export let unapply;
	export let unary;
	export let uncurryN;
	export let unfold;
	export let union;
	export let unionWith;
	export let uniq;
	export let uniqBy;
	export let uniqWith;
	export let unless;
	export let unnest;
	export let until;
	export let update;
	export let useWith;
	export let values;
	export let valuesIn;
	export let view;
	export let when;
	export let where;
	export let whereEq;
	export let without;
	export let xprod;
	export let zip;
	export let zipObj;
	export let zipWith;
}